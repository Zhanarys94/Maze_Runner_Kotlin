type: edu
files:
- name: src/mazerunner/Main.kt
  visible: true
  text: |-
    package mazerunner

    import kotlin.random.Random
    import kotlin.random.nextInt

    class Maze {
        enum class Pattern(val character: String) {
            PASS("  "),
            WALL("\u2588\u2588")
        }

        private val entranceRow = if (Random.nextBoolean()) {
            Random.nextInt(1..8)
        } else if (Random.nextBoolean()) 0 else 9
        private val entranceColumn = when (entranceRow) {
            in 1..8 -> if (Random.nextBoolean()) 0 else 9
            else -> Random.nextInt(1..8)
        }
        private val exitRow = when (entranceRow) {
            0 -> 9
            9 -> 0
            else -> Random.nextInt(1.. 8)
        }
        private val exitColumn = when (exitRow) {
            in 1..8 -> if (entranceColumn == 9) 0 else 9
            else -> Random.nextInt(1..8)
        }

        private val maze = Array(10) { IntArray(10) { 1 } }
        private var entered = false
        private val fakePath = when {
            entranceColumn == 0 && entranceRow < 5 -> 9 to Random.nextInt(5..8)
            entranceColumn == 0 && entranceRow > 5 -> 0 to Random.nextInt(5..8)
            entranceColumn == 9 && entranceRow < 5 -> 9 to Random.nextInt(1..4)
            entranceColumn == 9 && entranceRow > 5 -> 0 to Random.nextInt(1..4)
            entranceColumn < 5 && entranceRow == 0 -> Random.nextInt(5..8) to 9
            entranceColumn > 5 && entranceRow == 0 -> Random.nextInt(5..8) to 0
            entranceColumn < 5 && entranceRow == 9 -> Random.nextInt(1..4) to 9
            else -> Random.nextInt(1..4) to 0
        }

        init {
            maze[entranceRow][entranceColumn] = 0
            maze[exitRow][exitColumn] = 0
            println(this)
            generate(entranceRow, entranceColumn)
            entered = false
            //generate(exitRow, exitColumn,true)
            entered = false
            //generate(fakePath.first, fakePath.second)
           // bomb()

        }

        private fun generate(row: Int, column: Int, isExit: Boolean = false) {
            val visited = Array(10) { BooleanArray(10) { false } }
            visited[row][column] = true
            val stack = mutableListOf<Pair<Int, Int>>()
            stack.add(Pair(row, column))

            while (stack.isNotEmpty()) {
                val current = stack.last()
                val (currentRow, currentColumn) = current
                when {
                    !isExit && currentRow == 1 && exitRow == 0 && currentColumn == exitColumn
                    || !isExit && currentRow == 8 && exitRow == 9 && currentColumn == exitColumn -> break
                    !isExit && currentColumn == 1 && exitColumn == 0 && currentRow == exitRow
                    || !isExit && currentColumn == 8 && exitColumn == 9 && currentRow == exitRow -> break
                }
                val neighbors = mutableListOf<Pair<Int, Int>>()

                if (entered) {
                    if (currentRow in 2..8 && currentColumn in 1..8 && !visited[currentRow - 1][currentColumn])
                        neighbors.add(Pair(currentRow - 1, currentColumn))
                    if (currentRow in 1..7 && currentColumn in 1..8 && !visited[currentRow + 1][currentColumn])
                        neighbors.add(Pair(currentRow + 1, currentColumn))
                    if (currentColumn in 2..8 && currentRow in 1..8 && !visited[currentRow][currentColumn - 1])
                        neighbors.add(Pair(currentRow, currentColumn - 1))
                    if (currentColumn in 1..7 && currentRow in 1..8 && !visited[currentRow][currentColumn + 1])
                        neighbors.add(Pair(currentRow, currentColumn + 1))
                } else {
                    when {
                        currentRow == 9 && currentColumn in 1..8 -> neighbors.add(Pair(currentRow - 1, currentColumn))
                        currentRow == 0 && currentColumn in 1..8 -> neighbors.add(Pair(currentRow + 1, currentColumn))
                        currentRow in 1..8 && currentColumn == 9 -> neighbors.add(Pair(currentRow, currentColumn - 1))
                        currentRow in 1..8 && currentColumn == 0 -> neighbors.add(Pair(currentRow, currentColumn + 1))
                    }
                    entered = true
                }

                if (neighbors.isNotEmpty()) {
                    val chosenNeighbor = try {
                        if (!isExit) {
                                when {
                                    exitRow > currentRow -> neighbors.filter { it.first >= currentRow }.random()
                                    exitRow < currentRow -> neighbors.filter { it.first <= currentRow }.random()
                                    exitColumn > currentRow -> neighbors.filter { it.second >= currentColumn }.random()
                                    else -> neighbors.filter { it.second <= currentColumn }.random()
                                }
                        } else {
                            when {
                                exitRow > currentRow -> neighbors.filter { it.first <= currentRow }.random()
                                exitRow < currentRow -> neighbors.filter { it.first >= currentRow }.random()
                                exitColumn > currentRow -> neighbors.filter { it.second <= currentColumn }.random()
                                else -> neighbors.filter { it.second >= currentColumn }.random()
                            }
                        }
                    } catch (e: NoSuchElementException) {
                    neighbors.random()
                }
                    val secondNeighbor: Pair<Int, Int>? = if (neighbors.size > 1 && Random.nextInt(1..3) == 2) {
                        neighbors.filter { it != chosenNeighbor }.random()
                    } else null
                    val (neighborRow, neighborColumn) = chosenNeighbor
                    val (secondNeighborRow, secondNeighborColumn) = secondNeighbor ?: (0 to 0)

                    if (neighborRow < currentRow) {
                        maze[neighborRow][neighborColumn] = 0 // remove top wall
                    } else if (neighborColumn < currentColumn) {
                        maze[neighborRow][neighborColumn] = 0 // remove left wall
                    } else if (neighborRow > currentRow) {
                        maze[neighborRow][neighborColumn] = 0 // remove bottom wall
                    } else if (neighborColumn > currentColumn) {
                        maze[neighborRow][neighborColumn] = 0 // remove right wall
                    }
                    if (secondNeighbor != null && !isExit) {
                        if (secondNeighborColumn < currentColumn) {
                            maze[secondNeighborRow][secondNeighborColumn] = 0
                        } else if (secondNeighborRow > currentRow) {
                            maze[secondNeighborRow][secondNeighborColumn] = 0
                        } else if (secondNeighborColumn > currentColumn) {
                            maze[secondNeighborRow][secondNeighborColumn] = 0
                        } else if (secondNeighborRow < currentRow) {
                            maze[secondNeighborRow][secondNeighborColumn] = 0
                        }
                    }
                    for (neighbor in neighbors) {
                        visited[neighbor.first][neighbor.second] = true
                    }
                    stack.add(chosenNeighbor)
                    if (secondNeighbor != null) stack.add(secondNeighbor)
                    neighbors.clear()
                } else {
                    stack.removeLast()
                }
            }
            println(this)
        }

        private fun bomb() {
            for (row in 1..maze.lastIndex - 3) {
                for (col in 1..maze[row].lastIndex - 3) {
                    if (maze[row][col] == 1 && maze[row][col + 1] == 1 && maze[row][col + 2] == 1 && maze[row + 1][col] == 1
                        && maze[row + 2][col] == 1 && maze[row + 2][col + 2] == 1) {
                        maze[row][col] = 0
                        maze[row][col + 1] = 0
                        maze[row + 1][col ] = 0
                        maze[row + 2][col] = 0
                        maze[row + 2][col + 2] = 0
                    }
                }
            }
            println(this)
        }

        override fun toString(): String {
            val builder = StringBuilder()
            for (row in maze) {
                for (cell in row) {
                    builder.append(if (cell == 1) Pattern.WALL.character else Pattern.PASS.character)
                }
                builder.append("\n")
            }
            return builder.toString()
        }
    }

    fun main() {
        val maze = Maze()
        println(maze)
    }
  learner_created: false
- name: test/MazeRunnerTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum Elem {
        WALL, EMPTY, PATH, DUMMY;

        static Elem get(char c) {
            if (c == '\u2588') {
                return WALL;
            } else if (c == ' ') {
                return EMPTY;
            } else if (c == '/') {
                return PATH;
            } else {
                return null;
            }
        }
    }

    class Maze {

        // maze[height][width]
        // maze[row][col]
        Elem[][] maze;

        Maze(Maze other) {
            maze = new Elem[other.getHeight()][other.getWidth()];
            for (int h = 0; h < other.getHeight(); h++) {
                for (int w = 0; w < other.getWidth(); w++) {
                    maze[h][w] = other.maze[h][w];
                }
            }
        }

        Maze(List<String> lines) throws Exception {

            int lineCount = 1;
            for (String line : lines) {
                if (line.length() % 2 != 0) {
                    throw new Exception("Line " + lineCount + " of the maze " +
                        "contains odd number of characters. Should be always even.");
                }

                for (char c : line.toCharArray()) {
                    if (Elem.get(c) == null) {
                        String hex = Integer.toHexString((int)c);
                        throw new Exception(
                            "Found strange symbol in the " + lineCount +
                                " line of the maze: \\u" + hex);
                    }
                }

                int lineWidth = line.length() / 2;

                for (int currWidth = 0; currWidth < lineWidth; currWidth++) {
                    int currIndex = currWidth * 2;
                    int nextIndex = currIndex + 1;

                    char currChar = line.charAt(currIndex);
                    char nextChar = line.charAt(nextIndex);

                    if (currChar != nextChar) {
                        throw new Exception("There are symbols in " +
                            "this line that don't appear twice in a row " +
                            "(at indexes " + currIndex + " and " + nextIndex + ").\n" +
                            "Line: \"" + line + "\"");
                    }
                }

                lineCount++;
            }

            int mazeWidth = lines.get(0).length() / 2;
            int mazeHeight = lines.size();

            lineCount = 1;
            for (String line : lines) {
                if (line.length() / 2 != mazeWidth) {
                    throw new Exception("The first line of the maze contains " +
                        lines.get(0).length() + " characters, but the line #" +
                        lineCount + " contains " + line.length() + " characters.");
                }
                lineCount++;
            }

            maze = new Elem[mazeHeight][mazeWidth];

            for (int currHeight = 0; currHeight < mazeHeight; currHeight++) {
                String line = lines.get(currHeight);
                for (int currWidth = 0; currWidth < mazeWidth; currWidth++) {
                    char c = line.charAt(currWidth * 2);
                    maze[currHeight][currWidth] = Elem.get(c);
                }
            }

            if (maze[0][0] != Elem.WALL ||
                maze[0][mazeWidth - 1] != Elem.WALL ||
                maze[mazeHeight - 1][0] != Elem.WALL ||
                maze[mazeHeight - 1][mazeWidth - 1] != Elem.WALL) {
                throw new Exception("All four corners of the maze must be walls.");
            }

            for (int h = 0; h <= mazeHeight - 3; h++) {
                for (int w = 0; w <= mazeWidth - 3; w++) {
                    if (getElem(h, w) == Elem.WALL &&
                        getElem(h, w + 1) == Elem.WALL &&
                        getElem(h, w + 2) == Elem.WALL &&

                        getElem(h + 1, w) == Elem.WALL &&
                        getElem(h + 1, w + 1) == Elem.WALL &&
                        getElem(h + 1, w + 2) == Elem.WALL &&

                        getElem(h + 2, w) == Elem.WALL &&
                        getElem(h + 2, w + 1) == Elem.WALL &&
                        getElem(h + 2, w + 2) == Elem.WALL) {

                        throw new Exception("There are 3x3 block in the maze " +
                            "consisting only of walls. Such blocks are not allowed.");
                    }
                }
            }
        }

        Elem[] getRow(int rowNum) {
            Elem[] newRow = new Elem[getWidth()];
            for (int i = 0; i < getWidth(); i++) {
                newRow[i] = maze[rowNum][i];
            }
            return newRow;
        }

        Elem[] getCol(int colNum) {
            Elem[] newCol = new Elem[getHeight()];
            for (int i = 0; i < getHeight(); i++) {
                newCol[i] = maze[i][colNum];
            }
            return newCol;
        }

        Elem getElem(int height, int width) {
            return maze[height][width];
        }

        void setElem(int height, int width, Elem elem) {
            maze[height][width] = elem;
        }

        int getWidth() {
            return maze[0].length;
        }

        int getHeight() {
            return maze.length;
        }

        Maze copy() {
            return new Maze(this);
        }

        int count(Elem toCount) {
            int sum = 0;
            for (Elem[] row : maze) {
                for (Elem e : row) {
                    if (e == toCount) {
                        sum++;
                    }
                }
            }
            return sum;
        }

        int countAround(int h, int w, Elem elem) {
            int sum = 0;

            if (h + 1 < getHeight() &&
                getElem(h + 1, w) == elem) {
                sum++;
            }

            if (h - 1 >= 0 &&
                getElem(h - 1, w) == elem) {
                sum++;
            }

            if (w + 1 < getWidth() &&
                getElem(h, w + 1) == elem) {
                sum++;
            }

            if (w - 1 >= 0 &&
                getElem(h, w - 1) == elem) {
                sum++;
            }

            return sum;
        }

        int countEntrances() {
            int entranceCount = 0;
            for (Elem[] line : new Elem[][] {
                getCol(0),
                getCol(getWidth() - 1),
                getRow(0),
                getRow(getHeight() - 1)
            }) {

                for (Elem e : line) {
                    if (e != Elem.WALL) {
                        entranceCount++;
                    }
                }
            }
            return entranceCount;
        }

        private void propagate(Elem from, Elem to) {
            boolean didPropagate = true;
            while (didPropagate) {
                didPropagate = false;
                for (int h = 0; h < getHeight(); h++) {
                    for (int w = 0; w < getWidth(); w++) {
                        if (getElem(h, w) == from) {
                            if (countAround(h, w, to) > 0) {
                                didPropagate = true;
                                setElem(h, w, to);
                            }
                        }
                    }
                }
            }
        }

        int checkAccessibility() {
            int entranceHeight = 0;
            int entranceWidth = 0;

            findPoints: {
                for (int currWidth : new int[] {0, getWidth() - 1}) {
                    for (int currHeight = 0; currHeight < getHeight(); currHeight++) {
                        if (getElem(currHeight, currWidth) != Elem.WALL) {
                            entranceHeight = currHeight;
                            entranceWidth = currWidth;
                            break findPoints;
                        }
                    }
                }

                for (int currHeight : new int[] {0, getHeight() - 1}) {
                    for (int currWidth = 0; currWidth < getWidth(); currWidth++) {
                        if (getElem(currHeight, currWidth) != Elem.WALL) {
                            entranceHeight = currHeight;
                            entranceWidth = currWidth;
                            break findPoints;
                        }
                    }
                }
            }

            Maze copy = copy();
            copy.setElem(entranceHeight, entranceWidth, Elem.PATH);
            copy.propagate(Elem.EMPTY, Elem.PATH);

            return copy.count(Elem.EMPTY);
        }

        int checkPath() throws Exception {
            int entranceHeight = 0;
            int entranceWidth = 0;

            for (int currWidth : new int[] {0, getWidth() - 1}) {
                for (int currHeight = 0; currHeight < getHeight(); currHeight++) {
                    if (getElem(currHeight, currWidth) == Elem.EMPTY) {
                        throw new Exception("If the maze is solved all " +
                            "the entrances should be marked with '//' characters");
                    }
                    if (getElem(currHeight, currWidth) == Elem.PATH) {
                        entranceHeight = currHeight;
                        entranceWidth = currWidth;
                    }
                }
            }

            for (int currHeight : new int[] {0, getHeight() - 1}) {
                for (int currWidth = 0; currWidth < getWidth(); currWidth++) {
                    if (getElem(currHeight, currWidth) == Elem.EMPTY) {
                        throw new Exception("If the maze is solved all " +
                            "the entrances should be marked with '//' characters");
                    }
                    if (getElem(currHeight, currWidth) == Elem.PATH) {
                        entranceHeight = currHeight;
                        entranceWidth = currWidth;
                    }
                }
            }

            for (int h = 0; h < getHeight(); h++) {
                for (int w = 0; w < getWidth(); w++) {
                    if (getElem(h, w) == Elem.PATH) {
                        if (countAround(h, w, Elem.PATH) >= 3) {
                            throw new Exception("The escape path shouldn't branch off, " +
                                "it should go in one direction.");
                        }
                    }
                }
            }

            Maze copy = copy();
            copy.setElem(entranceHeight, entranceWidth, Elem.DUMMY);
            copy.propagate(Elem.PATH, Elem.DUMMY);

            return copy.count(Elem.PATH);
        }

        boolean equals(Maze other) {
            if (getWidth() != other.getWidth() || getHeight() != other.getHeight()) {
                return false;
            }
            for (int h = 0; h < getHeight(); h++) {
                for (int w = 0; w < getWidth(); w++) {
                    if (getElem(h, w) == Elem.WALL && other.getElem(h, w) != Elem.WALL ||
                        getElem(h, w) != Elem.WALL && other.getElem(h, w) == Elem.WALL) {
                        return false;
                    }
                }
            }
            return true;
        }

        static List<Maze> parse(String text) throws Exception {

            List<Maze> mazes = new ArrayList<>();

            List<String> lines = text
                .lines()
                .collect(Collectors.toList());

            lines.add("");

            List<String> mazeLines = new ArrayList<>();

            boolean isStarted = false;
            for (String line : lines) {
                if (line.contains("\u2588")) {
                    isStarted = true;
                    mazeLines.add(line);
                } else if (isStarted) {
                    isStarted = false;
                    Maze maze = new Maze(mazeLines);
                    mazes.add(maze);
                    mazeLines.clear();
                }
            }

            return mazes;
        }

    }

    class Clue {
        int size;
        boolean withPath;
        int count;
        Clue(int s, int c, boolean wp) {
            size = s;
            count = c;
            withPath = wp;
        }
    }

    public class MazeRunnerTest extends StageTest<Clue> {

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<Clue>()
                    .setInput("1\n17\n0")
                    .setAttach(new Clue(17, 1, false)),

                new TestCase<Clue>()
                    .setInput("1\n29\n3\ntest_maze.txt\n0")
                    .setAttach(new Clue(29, 1, false)),

                new TestCase<Clue>()
                    .setInput("2\ntest_maze.txt\n4\n0")
                    .setAttach(new Clue(29, 1, false)),

                new TestCase<Clue>()
                    .setInput("1\n35\n3\ntest_maze.txt\n0")
                    .setAttach(new Clue(35, 1, false)),

                new TestCase<Clue>()
                    .setInput("2\ntest_maze.txt\n4\n0")
                    .setAttach(new Clue(35, 1, false)),

                new TestCase<Clue>()
                    .setInput("2\ntest_maze.txt\n4\n5\n0")
                    .setAttach(new Clue(35, 2, true))
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<Maze> mazes;
            try {
                mazes = Maze.parse(reply);
            } catch (Exception e) {
                return CheckResult.wrong(
                    e.getMessage()
                );
            }

            if (mazes.size() == 0) {
                return CheckResult.wrong(
                    "No mazes found in the output. Check if you are using " +
                        "\\u2588 character to print the maze."
                );
            }

            if (mazes.size() != clue.count) {
                if (clue.count == 1) {
                    return CheckResult.wrong(
                        "Found " + mazes.size() + " mazes in the output. " +
                            "Should be only one maze."
                    );
                } else {
                    return CheckResult.wrong(
                        "Found " + mazes.size() + " mazes in the output. " +
                            "Should be two mazes."
                    );
                }
            }

            Maze fst = mazes.get(0);
            Maze snd = mazes.size() == 2 ? mazes.get(1) : null;

            if (snd != null && !fst.equals(snd)) {
                return CheckResult.wrong(
                    "The two mazes shown should be equal, but they are different."
                );
            }

            if (fst.count(Elem.PATH) != 0) {
                return CheckResult.wrong(
                    "The first maze should not contain '/' characters."
                );
            }

            int entrances = fst.countEntrances();
            if (entrances != 2) {
                return new CheckResult(false,
                    "There are " + entrances + " entrances to the maze, " +
                        "should be only two.");
            }

            int emptyLeft = fst.checkAccessibility();
            if (emptyLeft > 0) {
                return new CheckResult(false,
                    "There are " + emptyLeft + " empty " +
                        "cells that are inaccessible from the entrance of the maze " +
                        "(or there is no way from the entrance to the exit)."
                );
            }

            if (fst.getHeight() != clue.size) {
                return new CheckResult(false,
                    "Number of rows in the maze is incorrect. " +
                        "It's " + fst.getHeight() + ", but should be " + clue.size);
            }

            if (fst.getWidth() != clue.size) {
                return new CheckResult(false,
                    "Number of columns in the maze is incorrect. " +
                        "It's " + fst.getWidth() + ", but should be " + clue.size);
            }

            if (snd != null && clue.withPath) {
                try {
                    int pathLeft = snd.checkPath();
                    if (pathLeft > 0) {
                        return new CheckResult(false,
                            "There are " + pathLeft + " escape path ('//') " +
                                "cells that are separated from the escape path of the maze " +
                                "(or there is a break somewhere in the escape path)."
                        );
                    }
                } catch (Exception e) {
                    return CheckResult.wrong(
                        e.getMessage()
                    );
                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: test_maze.txt
  visible: true
  text: |
    1 1 1 1 1 1 0 1 1 1 1 1 1 1 1
    1 1 0 1 0 1 0 1 0 1 0 1 0 1 1
    1 0 0 0 0 0 0 1 0 0 0 1 0 0 1
    1 1 0 1 0 1 1 1 0 1 1 1 0 1 1
    1 0 0 1 0 0 0 1 0 0 0 0 0 0 1
    1 1 0 1 0 1 1 1 0 1 1 1 1 1 1
    1 0 0 1 0 0 0 0 0 0 0 0 0 0 1
    1 1 0 1 0 1 0 1 0 1 0 1 1 1 1
    1 0 0 1 0 1 0 1 0 1 0 0 0 0 1
    1 1 0 1 1 1 0 1 1 1 0 1 1 1 1
    1 0 0 0 0 1 0 1 0 0 0 0 0 0 1
    1 1 0 1 1 1 0 1 1 1 0 1 0 1 1
    1 0 0 0 0 1 0 1 0 0 0 1 0 0 1
    1 1 0 1 0 1 0 1 0 1 0 1 0 1 1
    1 1 1 1 1 1 1 1 0 1 1 1 1 1 1
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/24321#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Sun, 16 Apr 2023 08:54:52 UTC"
record: -1
